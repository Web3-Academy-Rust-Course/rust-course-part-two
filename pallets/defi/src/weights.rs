
//! Autogenerated weights for `pallet_defi`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-F2AGLQ1`, CPU: `AMD Ryzen 7 5825U with Radeon Graphics`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("local")`, DB CACHE: 1024

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain=local
// --wasm-execution=compiled
// --pallet
// pallet_defi
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/defi/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn deposit() -> Weight;
	fn withdraw() -> Weight;
	fn borrow() -> Weight;
	fn repay() -> Weight;
	fn update_deposit_rate() -> Weight;
	fn update_borrowing_rate() -> Weight;
	fn update_collateral_factor() -> Weight;
	fn liquidate_user_position() -> Weight;
}

/// Weight functions for `pallet_defi`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Defi::Accounts` (r:1 w:1)
	/// Proof: `Defi::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `6196`
		// Minimum execution time: 66_367_000 picoseconds.
		Weight::from_parts(67_721_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Defi::Accounts` (r:1 w:1)
	/// Proof: `Defi::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::DepositRate` (r:1 w:0)
	/// Proof: `Defi::DepositRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310`
		//  Estimated: `6196`
		// Minimum execution time: 66_799_000 picoseconds.
		Weight::from_parts(67_900_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Defi::Accounts` (r:1 w:1)
	/// Proof: `Defi::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::DepositRate` (r:1 w:0)
	/// Proof: `Defi::DepositRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::CollateralFactor` (r:1 w:0)
	/// Proof: `Defi::CollateralFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `6196`
		// Minimum execution time: 70_456_000 picoseconds.
		Weight::from_parts(71_819_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Defi::Accounts` (r:1 w:1)
	/// Proof: `Defi::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::BorrowingRate` (r:1 w:0)
	/// Proof: `Defi::BorrowingRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310`
		//  Estimated: `6196`
		// Minimum execution time: 66_387_000 picoseconds.
		Weight::from_parts(67_440_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Defi::AuthorityAccount` (r:1 w:0)
	/// Proof: `Defi::AuthorityAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::DepositRate` (r:0 w:1)
	/// Proof: `Defi::DepositRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_deposit_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 10_591_000 picoseconds.
		Weight::from_parts(10_921_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Defi::AuthorityAccount` (r:1 w:0)
	/// Proof: `Defi::AuthorityAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::BorrowingRate` (r:0 w:1)
	/// Proof: `Defi::BorrowingRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_borrowing_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 10_360_000 picoseconds.
		Weight::from_parts(10_851_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Defi::AuthorityAccount` (r:1 w:0)
	/// Proof: `Defi::AuthorityAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::CollateralFactor` (r:0 w:1)
	/// Proof: `Defi::CollateralFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_collateral_factor() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 10_320_000 picoseconds.
		Weight::from_parts(10_831_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Defi::Accounts` (r:1 w:1)
	/// Proof: `Defi::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::DepositRate` (r:1 w:0)
	/// Proof: `Defi::DepositRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::BorrowingRate` (r:1 w:0)
	/// Proof: `Defi::BorrowingRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Defi::CollateralFactor` (r:1 w:0)
	/// Proof: `Defi::CollateralFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn liquidate_user_position() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3643`
		// Minimum execution time: 30_489_000 picoseconds.
		Weight::from_parts(32_252_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	fn deposit() -> Weight {
		Weight::from_parts(67_721_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn withdraw() -> Weight {
		Weight::from_parts(67_900_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn borrow() -> Weight {
		Weight::from_parts(71_819_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn repay() -> Weight {
		Weight::from_parts(67_440_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn update_deposit_rate() -> Weight {
		Weight::from_parts(10_921_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_borrowing_rate() -> Weight {
		Weight::from_parts(10_851_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_collateral_factor() -> Weight {
		Weight::from_parts(10_831_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn liquidate_user_position() -> Weight {
		Weight::from_parts(32_252_000, 0)
			.saturating_add(Weight::from_parts(0, 3643))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}